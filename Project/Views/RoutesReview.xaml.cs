using Project.Modals;
using Project.Model;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Automation.Peers;
using System.Windows.Automation.Provider;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace Project.Views
{
    /// <summary>
    /// Interaction logic for RoutesReview.xaml
    /// </summary>
    public partial class RoutesReview : UserControl
    {

        ObservableCollection<Route> Routes = new ObservableCollection<Route>();

        ObservableCollection<TrainStation> Stations = new ObservableCollection<TrainStation>();

        Route selectedRoute = null;

        public RoutesReview()
        {
            InitializeComponent();
        }

        public void TableRoutesLoad(object sender, RoutedEventArgs e)
        {
            fillRoutesTable();
        }

        public void fillRoutesTable()
        {
            MainWindow window = (MainWindow)Window.GetWindow(this);
            Routes = new ObservableCollection<Route>(window.systemEntities.systemRoutes);
            tableRoutes.ItemsSource = Routes;
            Stations = new ObservableCollection<TrainStation>(window.systemEntities.systemTrainStations);
            startingStation.ItemsSource = Stations;
            endingStation.ItemsSource = Stations;
        }

        private void tableRoutes_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            if (e.Column.Header.ToString() == "StartingStation")
            {
                e.Column.Header = "Početna stanica ";
            }
            if (e.Column.Header.ToString() == "EndingStation")
            {
                e.Column.Header = "Krajnja stanica ";
            }
            if (e.Column.Header.ToString() == "Stations")
            {
                e.Column.Visibility = Visibility.Hidden;
            }
            if (e.Column.Header.ToString() == "Id")
            {
                e.Column.Visibility = Visibility.Hidden;
            }
            if (e.Column.Header.ToString() == "Prices")
            {
                e.Column.Visibility = Visibility.Hidden;
            }
        }

        public void ShowAllRoutes(object sender, RoutedEventArgs e)
        {
            fillRoutesTable();
        }

        private void tableRoutes_AutoGeneratedColumns(object sender, EventArgs e)
        {
            var grid = (DataGrid)sender;
            foreach (var item in grid.Columns)
            {
                if (item.Header.ToString() == "Mrežni prikaz")
                {
                    item.DisplayIndex = grid.Columns.Count - 1;
                    break;
                }
            }
        }

        private void Window_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            MainWindow window = (MainWindow)Window.GetWindow(this);
            if ((e.WidthChanged || e.HeightChanged) && e.PreviousSize.Height != 0)
            {
                foreach (TrainStation trainStation in window.systemEntities.systemTrainStations)
                {
                    trainStation.Y = (e.NewSize.Height * trainStation.Y) / e.PreviousSize.Height;
                    trainStation.X = (e.NewSize.Width * trainStation.X) / e.PreviousSize.Width;
                }
                if (drawSurface.Visibility == Visibility.Visible)
                {
                    foreach (Ellipse ellipse in drawSurface.Children)
                    {
                        Canvas.SetLeft(ellipse, (e.NewSize.Width * Canvas.GetLeft(ellipse)) / e.PreviousSize.Width);
                        Canvas.SetTop(ellipse, (e.NewSize.Height * Canvas.GetTop(ellipse)) / e.PreviousSize.Height);
                    }
                }
            }
        }

        public void ShowDetailsForRoute(object sender, RoutedEventArgs e)
        {
            selectedRoute = ((FrameworkElement)sender).DataContext as Route;
            ShowWebRoutes();
        }

        private void ShowWebRoutes()
        {
            transformWebView();
            CreateCircle(selectedRoute.StartingStation, System.Windows.Media.Colors.Green);
            foreach (TrainStation trainStation in selectedRoute.Stations)
            {
                CreateCircle(trainStation, System.Windows.Media.Colors.Blue);
            }
            CreateCircle(selectedRoute.EndingStation, System.Windows.Media.Colors.Red);
        }

        private void transformWebView()
        {
            routesGrid.Background.Opacity = 100;
            labelTitle.Visibility = Visibility.Hidden;
            labelFrom.Visibility = Visibility.Hidden;
            startingStation.Visibility = Visibility.Hidden;
            labelTo.Visibility = Visibility.Hidden;
            endingStation.Visibility = Visibility.Hidden;
            search.Visibility = Visibility.Hidden;
            reset.Visibility = Visibility.Hidden;
            tableRoutes.Visibility = Visibility.Hidden;
            drawSurface.Visibility = Visibility.Visible;
            back.Visibility = Visibility.Visible;
        }

        private void CreateCircle(TrainStation trainStation, Color color)
        {
            Ellipse ellipse = new Ellipse();
            ellipse.Width = 15;
            ellipse.Height = 15;
            ellipse.Fill = new SolidColorBrush(color);
            Canvas.SetLeft(ellipse, trainStation.X);
            Canvas.SetTop(ellipse, trainStation.Y);

            var toolTipTextBlock = new TextBlock();
            toolTipTextBlock.Text = trainStation.Name;
            toolTipTextBlock.FontSize = 24;
            toolTipTextBlock.FontFamily = new FontFamily("Arial black");
            toolTipTextBlock.FontWeight = FontWeights.Bold;

            StackPanel stackPanel = new StackPanel();
            stackPanel.Children.Add(toolTipTextBlock);

            ellipse.MouseMove += Ellipse_MouseMove;
            ellipse.ToolTip = stackPanel;
            drawSurface.Children.Add(ellipse);
        }

        public void SearchRoutes(object sender, RoutedEventArgs e)
        {
            if (startingStation.SelectedItem != null || endingStation.SelectedItem != null)
            {
                ObservableCollection<Route> notMade = new ObservableCollection<Route>();
                if (startingStation.SelectedItem != null)
                    foreach (Route route in Routes)
                    {
                        if (!route.StartingStation.Equals(startingStation.SelectedItem) && !notMade.Contains(route)) notMade.Add(route);
                    }
                if (endingStation.SelectedItem != null)
                    foreach (Route route in Routes)
                    {
                        if (!route.EndingStation.Equals(endingStation.SelectedItem) && !route.Stations.Contains(endingStation.SelectedItem) && !notMade.Contains(route)) notMade.Add(route);
                    }
                foreach (Route route in notMade) Routes.Remove(route);
            }
            else
            {
                Error error = new Error("Niste uneli nijedan kriterijum za pretraživanje!");
                error.ShowDialog();
            }
        }

        public void ResetSearch(object sender, RoutedEventArgs e)
        {
            MainWindow window = (MainWindow)Window.GetWindow(this);
            Routes = new ObservableCollection<Route>(window.systemEntities.systemRoutes);
            tableRoutes.ItemsSource = Routes;
            startingStation.SelectedItem = null;
            endingStation.SelectedItem = null;
        }

        public void BackOnSearch(object sender, RoutedEventArgs e)
        {
            transformFromWebView();
        }

        private void transformFromWebView()
        {
            routesGrid.Background.Opacity = 0;
            drawSurface.Visibility = Visibility.Hidden;
            labelTitle.Visibility = Visibility.Visible;
            labelFrom.Visibility = Visibility.Visible;
            startingStation.Visibility = Visibility.Visible;
            labelTo.Visibility = Visibility.Visible;
            endingStation.Visibility = Visibility.Visible;
            search.Visibility = Visibility.Visible;
            reset.Visibility = Visibility.Visible;
            tableRoutes.Visibility = Visibility.Visible;
            back.Visibility = Visibility.Hidden;
            drawSurface.Children.Clear();
            selectedRoute = null;
        }

        private void Ellipse_MouseMove(object sender, MouseEventArgs e)
        {
            if (e.LeftButton == MouseButtonState.Pressed)
            {
                Ellipse ellipse = sender as Ellipse;
                DataObject dragData = new DataObject("ellipseMove", ellipse);
                DragDrop.DoDragDrop(ellipse, dragData, DragDropEffects.Move);
            }
        }

        private void Ellipse_DragEnter(object sender, DragEventArgs e)
        {
            if (!e.Data.GetDataPresent("ellipseMove"))
            {
                e.Effects = DragDropEffects.None;
            }
        }

        private void Ellipse_Drop(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent("ellipseMove"))
            {
                Ellipse ellipse = e.Data.GetData("ellipseMove") as Ellipse;
                Point endSpot = e.GetPosition(ellipse);
                Canvas.SetTop(ellipse, Canvas.GetTop(ellipse) + endSpot.Y);
                Canvas.SetLeft(ellipse, Canvas.GetLeft(ellipse) + endSpot.X);
            }
        }
    }
}
