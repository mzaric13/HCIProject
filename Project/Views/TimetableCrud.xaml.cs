using Project.Modals;
using Project.Model;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace Project.Views
{
    /// <summary>
    /// Interaction logic for TimetableCrud.xaml
    /// </summary>
    public partial class TimetableCrud : UserControl
    {
        ObservableCollection<Timetable> timetables = new ObservableCollection<Timetable>();
        public TimetableCrud()
        {
            InitializeComponent();
        }

        public void fillTimetableTable()
        {
            MainWindow window = (MainWindow)Window.GetWindow(this);
            timetables = new ObservableCollection<Timetable>(window.systemEntities.systemTimetables);
            tableTimetables.ItemsSource = timetables;
        }

        private void TimetableCrudLoaded(object sender, RoutedEventArgs e)
        {
            fillTimetableTable();
        }

        public void AddTimetable(object sender, RoutedEventArgs e)
        {
            MainWindow window = (MainWindow)Window.GetWindow(this);
            int maxIndex = window.systemEntities.systemTimetables.Max(t => t.id);
            timetables.Add(new Timetable(maxIndex + 1, DateTime.Now.ToString("hh:mm"), DateTime.Now.ToString("dd.MM.yyyy"), (DateTime.Now + new TimeSpan(2, 0, 0)).ToString("hh:mm"), DateTime.Now.ToString("dd.MM.yyyy"), window.systemEntities.systemTrains[0], window.systemEntities.systemRoutes[0]));
            window.systemEntities.systemTimetables.Add(new Timetable(maxIndex + 1, DateTime.Now.ToString("hh:mm"), DateTime.Now.ToString("dd.MM.yyyy"), (DateTime.Now + new TimeSpan(2, 0, 0)).ToString("hh:mm"), DateTime.Now.ToString("dd.MM.yyyy"), window.systemEntities.systemTrains[0], window.systemEntities.systemRoutes[0]));
            Success success = new Success("Uspešno dodat novi red vožnje.");
            success.ShowDialog();
        }

        private void tableTimetable_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            if (e.Column.Header.ToString() == "startTime")
            {
                e.Column.Header = "Polazak ";
            }
            if (e.Column.Header.ToString() == "startDate")
            {
                e.Column.Header = "Datum polaska ";
            }
            if (e.Column.Header.ToString() == "endTime")
            {
                e.Column.Header = "Dolazak ";
            }
            if (e.Column.Header.ToString() == "endDate")
            {
                e.Column.Header = "Datum dolaska ";
            }
            if (e.Column.Header.ToString() == "id")
            {
                e.Column.Header = "Broj reda vožnje ";
                e.Column.IsReadOnly = true;
            }
            if (e.Column.Header.ToString() == "Route")
            {
                e.Column.Header = "Broj linije ";
            }
            if (e.Column.Header.ToString() == "train")
            {
                e.Column.Visibility = Visibility.Hidden;
            }
        }

        public void DeleteTimetable(object sender, RoutedEventArgs e)
        {
            YesNoModal yesNoModal = new YesNoModal("Da li ste sigurni da želite da obrišete odabrani red vožnje?");
            yesNoModal.ShowDialog();
            if (yesNoModal.response)
            {
                MainWindow window = (MainWindow)Window.GetWindow(this);
                Timetable timetable = ((FrameworkElement)sender).DataContext as Timetable;
                foreach (Timetable t in window.systemEntities.systemTimetables)
                {
                    if (t.id == timetable.id)
                    {
                        //treba i liniju voznje obrisati koja je vezana za ovaj red voznje
                        timetables.Remove(timetable);
                        window.systemEntities.systemTimetables.Remove(t);
                        break;
                    }
                }
            }
        }

        private void tableTimetables_AutoGeneratedColumns(object sender, EventArgs e)
        {
            var grid = (DataGrid)sender;
            foreach (var item in grid.Columns)
            {
                if (item.Header.ToString() == "Obriši")
                {
                    item.DisplayIndex = grid.Columns.Count - 1;
                    break;
                }
            }
        }

        public void ShowAllTimetables(object sender, RoutedEventArgs e)
        {
            fillTimetableTable();
        }

        public void SearchTimetables(object sender, RoutedEventArgs e)
        {
            if (searchText.Text.Length == 0)
            {
                Error error = new Error("Niste uneli nijedan karakter za pretraživanje!");
                error.ShowDialog();
            }
            else
            {
                MainWindow window = (MainWindow)Window.GetWindow(this);
                List<Timetable> searchedTimetables = new List<Timetable>();
                foreach (Timetable timetable in window.systemEntities.systemTimetables)
                {
                    if (timetable.startDate.Contains(searchText.Text) || timetable.startTime.Contains(searchText.Text) ||
                        timetable.endDate.Contains(searchText.Text) || timetable.endTime.Contains(searchText.Text))
                    {
                        searchedTimetables.Add(timetable);
                    }
                }
                timetables = new ObservableCollection<Timetable>(searchedTimetables);
                tableTimetables.ItemsSource = timetables;
            }
        }
    }
}
