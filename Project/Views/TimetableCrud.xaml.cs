using Project.Modals;
using Project.Model;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Automation.Peers;
using System.Windows.Automation.Provider;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace Project.Views
{
    /// <summary>
    /// Interaction logic for TimetableCrud.xaml
    /// </summary>
    public partial class TimetableCrud : UserControl
    {
        ObservableCollection<Timetable> timetables = new ObservableCollection<Timetable>();

        public Timetable CurrentTimeTable;
        public TimetableCrud()
        {
            InitializeComponent();
        }

        public void fillTimetableTable()
        {
            MainWindow window = (MainWindow)Window.GetWindow(this);
            timetables = new ObservableCollection<Timetable>(window.systemEntities.systemTimetables);
            tableTimetables.ItemsSource = timetables;
        }

        private void TimetableCrudLoaded(object sender, RoutedEventArgs e)
        {
            fillTimetableTable();
        }

        public void AddTimetable(object sender, RoutedEventArgs e)
        {
            MainWindow window = (MainWindow)Window.GetWindow(this);
            int maxIndex = window.systemEntities.systemTimetables.Max(t => t.id);
            DateTime nextDay = DateTime.
                ParseExact(window.systemEntities.systemTimetables[maxIndex - 1].endDate, "dd.MM.yyyy.", System.Globalization.CultureInfo.GetCultureInfo("es-ES").DateTimeFormat).AddDays(1);
            string nextDayString = nextDay.ToString("dd.MM.yyyy.");
            window.systemEntities.systemTimetables.Add(new Timetable(maxIndex + 1, "10:00", nextDayString, "12:00", nextDayString, window.systemEntities.systemTrains[0], window.systemEntities.systemRoutes[0]));
            fillTimetableTable();
            Success success = new Success("Uspešno dodat novi red vožnje za voz 1.");
            success.ShowDialog();
        }

        private void tableTimetable_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            if (e.Column.Header.ToString() == "startTime")
            {
                e.Column.Header = "Polazak ";
            }
            if (e.Column.Header.ToString() == "startDate")
            {
                e.Column.Header = "Datum polaska ";
            }
            if (e.Column.Header.ToString() == "endTime")
            {
                e.Column.Header = "Dolazak ";
            }
            if (e.Column.Header.ToString() == "endDate")
            {
                e.Column.Header = "Datum dolaska ";
            }
            if (e.Column.Header.ToString() == "id")
            {
                e.Column.Header = "Broj reda vožnje ";
                e.Column.IsReadOnly = true;
            }
            if (e.Column.Header.ToString() == "Route")
            {
                e.Column.Header = "Broj linije ";
                e.Column.IsReadOnly = true;
            }
            if (e.Column.Header.ToString() == "train")
            {
                e.Column.Visibility = Visibility.Hidden;
            }
        }

        public void DeleteTimetable(object sender, RoutedEventArgs e)
        {
            YesNoModal yesNoModal = new YesNoModal("Da li ste sigurni da želite da obrišete odabrani red vožnje?");
            yesNoModal.ShowDialog();
            if (yesNoModal.response)
            {
                MainWindow window = (MainWindow)Window.GetWindow(this);
                Timetable timetable = ((FrameworkElement)sender).DataContext as Timetable;
                foreach (Timetable t in window.systemEntities.systemTimetables)
                {
                    if (t.id == timetable.id)
                    {
                        window.systemEntities.systemTimetables.Remove(t);
                        fillTimetableTable();
                        break;
                    }
                }
            }
        }

        private void tableTimetables_AutoGeneratedColumns(object sender, EventArgs e)
        {
            var grid = (DataGrid)sender;
            foreach (var item in grid.Columns)
            {
                if (item.Header.ToString() == "Obriši")
                {
                    item.DisplayIndex = grid.Columns.Count - 1;
                    break;
                }
            }
        }

        public void ShowAllTimetables(object sender, RoutedEventArgs e)
        {
            fillTimetableTable();
        }

        public void SearchTimetables(object sender, RoutedEventArgs e)
        {
            if (searchText.Text.Length == 0)
            {
                Error error = new Error("Niste uneli nijedan karakter za pretraživanje!");
                error.ShowDialog();
            }
            else
            {
                MainWindow window = (MainWindow)Window.GetWindow(this);
                List<Timetable> searchedTimetables = new List<Timetable>();
                foreach (Timetable timetable in window.systemEntities.systemTimetables)
                {
                    if (timetable.startDate.Contains(searchText.Text) || timetable.startTime.Contains(searchText.Text) ||
                        timetable.endDate.Contains(searchText.Text) || timetable.endTime.Contains(searchText.Text))
                    {
                        searchedTimetables.Add(timetable);
                    }
                }
                timetables = new ObservableCollection<Timetable>(searchedTimetables);
                tableTimetables.ItemsSource = timetables;
            }
        }

        private void tableTimetables_BeginningEdit(object sender, DataGridBeginningEditEventArgs e)
        {
            if (e.Column.Header.ToString() != "Obriši")
            {
                TextBlock tb = (TextBlock)e.Column.GetCellContent(e.Row);
                Timetable item = (Timetable)tb.DataContext;
                CurrentTimeTable = item;
            }
        }

        private void tableTimetables_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e)
        {
            string columnName = e.Column.Header.ToString();
            if (columnName != "Obriši")
            {
                MainWindow window = (MainWindow)Window.GetWindow(this);
                int index = e.Row.GetIndex();
                var element = e.EditingElement as TextBox;
                string s = (((TextBox)e.EditingElement).Text);
                if (columnName == "Broj linije ")
                {                   
                    if (!doesRouteExist(window, s))
                    {
                        showRouteDoesntExistError(window, element);
                    }
                    else
                    {
                        showSuccessfullyChangedRoute(window, index);
                    }
                }
                else if (columnName == "Polazak " || columnName == "Dolazak ")
                {
                    if (s.Length != 5)
                    {
                        showNotCorrectFormatTimeError(columnName, element);
                    }
                    else
                    {
                        TimeSpan dummyOutput;
                        if (TimeSpan.TryParse(s, out dummyOutput))
                        {
                            DateTime startDate = DateTime.ParseExact(CurrentTimeTable.startDate, "dd.MM.yyyy.", System.Globalization.CultureInfo.GetCultureInfo("es-ES").DateTimeFormat);
                            DateTime endDate = DateTime.ParseExact(CurrentTimeTable.endDate, "dd.MM.yyyy.", System.Globalization.CultureInfo.GetCultureInfo("es-ES").DateTimeFormat);

                            if (columnName == "Polazak " && startDate == endDate && TimeSpan.Parse(s) >= TimeSpan.Parse(CurrentTimeTable.endTime))
                            {
                                showStartAfterEndTimeError(element);
                            }
                            else if (columnName == "Dolazak " && startDate == endDate && TimeSpan.Parse(s) <= TimeSpan.Parse(CurrentTimeTable.startTime))
                            {
                                showEndBeforeStartTimeError(element);
                            }
                            else
                            {
                                
                                if (isTimePeriodAlreadyInUse(window, columnName, s))
                                {
                                    showTrainAlreadyInUse(columnName, element);
                                }
                                else
                                {
                                    if (columnName == "Polazak ")
                                    {
                                        showSuccessfullyChangedStartTime(window, index, s);                   
                                    }
                                    else if (columnName == "Dolazak ")
                                    {
                                        showSuccessfullyChangedEndTime(window, index, s);
                                    }
                                    
                                }
                            }
                        }
                        else
                        {
                            showNotCorrectFormatTimeError(columnName, element);
                        }
                    }
                }
                else if (columnName == "Datum polaska " || columnName == "Datum dolaska ")
                {
                    if (s.Length != 11)
                    {
                        showNotCorrectFormatDateError(columnName, element);
                    }
                    else if (DateTime.ParseExact(s, "dd.MM.yyyy.", System.Globalization.CultureInfo.GetCultureInfo("es-ES").DateTimeFormat) <= DateTime.Now)
                    {
                        showDateNotAfterTodaysDateError(columnName, element);
                    }
                    else
                    {
                        DateTime dummyOutput;
                        if (DateTime.TryParseExact(s,@"dd.MM.yyyy.", new CultureInfo("es-ES"), System.Globalization.DateTimeStyles.None, out dummyOutput))
                        {
                            TimeSpan startTimespan = TimeSpan.Parse(CurrentTimeTable.startTime);
                            TimeSpan endTimespan = TimeSpan.Parse(CurrentTimeTable.endTime);
                            DateTime date = DateTime.ParseExact(s, "dd.MM.yyyy.",
                                System.Globalization.CultureInfo.GetCultureInfo("es-ES").DateTimeFormat);

                            if (columnName == "Datum polaska " && date > DateTime.ParseExact(CurrentTimeTable.endDate, "dd.MM.yyyy.",
                                System.Globalization.CultureInfo.GetCultureInfo("es-ES").DateTimeFormat))
                            {
                                showStartDateAfterEndDateError(element);
                            }
                            else if (columnName == "Datum dolaska " && date < DateTime.ParseExact(CurrentTimeTable.startDate, "dd.MM.yyyy.",
                                System.Globalization.CultureInfo.GetCultureInfo("es-ES").DateTimeFormat))
                            {
                                showEndDateBeforeStartDate(element);
                            }
                            else if ((columnName == "Datum polaska " && date == DateTime.ParseExact(CurrentTimeTable.endDate, "dd.MM.yyyy.",
                                System.Globalization.CultureInfo.GetCultureInfo("es-ES").DateTimeFormat) && (startTimespan >= endTimespan))
                                || (columnName == "Datum dolaska " && date == DateTime.ParseExact(CurrentTimeTable.startDate, "dd.MM.yyyy.",
                                System.Globalization.CultureInfo.GetCultureInfo("es-ES").DateTimeFormat)) && (startTimespan >= endTimespan))
                            {
                                showStartTimeIsAfterEndTime(columnName, element);
                            }
                            else
                            {
                                
                                if (isTrainInUse(window, columnName, s))
                                {
                                    showTrainAlreadyInUseDates(columnName, element);
                                }
                                else
                                {
                                    if (columnName == "Datum polaska ")
                                    {
                                        showSuccessfullyChangedStartDate(window, index, s);
                                    }
                                    else if (columnName == "Datum dolaska ")
                                    {
                                        showSuccessfullyChangedEndDate(window, index, s);
                                    }
                                }
                            }
                        }
                        else
                        {
                            showNotCorrectFormatDateError(columnName, element);
                        }
                    }
                }
            }
            ButtonAutomationPeer peer = new ButtonAutomationPeer(showAllTimetables);
            IInvokeProvider invokeProv = peer.GetPattern(PatternInterface.Invoke) as IInvokeProvider;
            invokeProv.Invoke();

        }

        private void showSuccessfullyChangedEndDate(MainWindow window, int index, string s)
        {
            window.systemEntities.systemTimetables[index].endDate = s;
            Success success = new Success("Uspešno promenjen datum dolaska odabranog reda vožnje.");
            success.ShowDialog();
        }

        private void showSuccessfullyChangedStartDate(MainWindow window, int index, string s)
        {
            window.systemEntities.systemTimetables[index].startDate = s;
            Success success = new Success("Uspešno promenjen datum polaska odabranog reda vožnje.");
            success.ShowDialog();
        }

        private void showTrainAlreadyInUseDates(string columnName, TextBox element)
        {
            Error error = new Error("Voz je već zauzet u izmenjenom ospegu datuma.");
            error.ShowDialog();
            if (columnName == "Datum polaska ")
            {
                element.Text = CurrentTimeTable.startDate;
            }
            else if (columnName == "Datum dolaska ")
            {
                element.Text = CurrentTimeTable.endDate;
            }
        }

        private bool isTrainInUse(MainWindow window, string columnName, string s)
        {
            DateTime changedDate = DateTime.ParseExact(s, "dd.MM.yyyy.", System.Globalization.CultureInfo.GetCultureInfo("es-ES").DateTimeFormat);
            DateTime startDateCurrent = DateTime.ParseExact(CurrentTimeTable.startDate, "dd.MM.yyyy.", System.Globalization.CultureInfo.GetCultureInfo("es-ES").DateTimeFormat);
            DateTime endDateCurrent = DateTime.ParseExact(CurrentTimeTable.endDate, "dd.MM.yyyy.", System.Globalization.CultureInfo.GetCultureInfo("es-ES").DateTimeFormat);
            TimeSpan startTimeCurrent = TimeSpan.Parse(CurrentTimeTable.startTime);
            TimeSpan endTimeCurrent = TimeSpan.Parse(CurrentTimeTable.endTime);

            foreach (Timetable timetable in window.systemEntities.systemTimetables)
            {

                DateTime startDateTimetable = DateTime.ParseExact(timetable.startDate, "dd.MM.yyyy.", System.Globalization.CultureInfo.GetCultureInfo("es-ES").DateTimeFormat);
                DateTime endDateTimetable = DateTime.ParseExact(timetable.endDate, "dd.MM.yyyy.", System.Globalization.CultureInfo.GetCultureInfo("es-ES").DateTimeFormat);
                TimeSpan startTimeTimetable = TimeSpan.Parse(timetable.startTime);
                TimeSpan endTimeTimetable = TimeSpan.Parse(timetable.endTime);

                if (timetable.train.Number == CurrentTimeTable.train.Number && timetable.id != CurrentTimeTable.id)
                {

                    if ((columnName == "Datum polaska " && changedDate <= startDateTimetable && endDateCurrent >= endDateTimetable) ||
                        (columnName == "Datum dolaska " && startDateCurrent <= startDateTimetable && changedDate >= endDateTimetable))
                    {
                        return true;
                    }
                    if ((columnName == "Datum polaska " && changedDate >= startDateTimetable && endDateCurrent <= endDateTimetable) ||
                        (columnName == "Datum dolaska " && startDateCurrent >= startDateTimetable && changedDate <= endDateTimetable))
                    {
                        return true;
                    }
                    if (columnName == "Datum polaska " && changedDate == startDateTimetable && endDateCurrent == endDateTimetable &&
                        ((startTimeCurrent >= startTimeTimetable || endTimeCurrent <= endTimeTimetable) || (startTimeCurrent <= startTimeTimetable && endTimeCurrent >= endTimeTimetable)))
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        private void showStartTimeIsAfterEndTime(string columnName, TextBox element)
        {
            Error error = new Error("Vreme dolaska je nakon vremena polaska. Molimo Vas da prvo izmenite jedno od vremena, a zatim datume.");
            error.ShowDialog();
            if (columnName == "Datum polaska ")
            {
                element.Text = CurrentTimeTable.startDate;
            }
            else if (columnName == "Datum dolaska ")
            {
                element.Text = CurrentTimeTable.endDate;
            }
        }

        private void showEndDateBeforeStartDate(TextBox element)
        {
            Error error = new Error("Datum dolaska ne može biti pre datuma polaska!");
            error.ShowDialog();
            element.Text = CurrentTimeTable.endDate;
        }

        private void showStartDateAfterEndDateError(TextBox element)
        {
            Error error = new Error("Datum polaska ne može biti posle datuma dolaska!");
            error.ShowDialog();
            element.Text = CurrentTimeTable.startDate;
        }

        private void showDateNotAfterTodaysDateError(string columnName, TextBox element)
        {
            Error error = new Error("Promenjeni datum mora biti posle današnjeg!");
            error.ShowDialog();
            if (columnName == "Datum polaska ")
            {
                element.Text = CurrentTimeTable.startDate;
            }
            else if (columnName == "Datum dolaska ")
            {
                element.Text = CurrentTimeTable.endDate;
            }
        }

        private void showNotCorrectFormatDateError(string columnName, TextBox element)
        {
            Error error = new Error("Format datuma polaska i dolaska je dd.MM.yyyy., " +
                "gde dd predstavlja dan u mesecu (01-{28-31}), MM predstavlja mesec (01-12)," +
                "a yyyy predstavlja godinu.");
            error.ShowDialog();
            if (columnName == "Datum polaska ")
            {
                element.Text = CurrentTimeTable.startDate;
            }
            else if (columnName == "Datum dolaska ")
            {
                element.Text = CurrentTimeTable.endDate;
            }
        }

        private void showSuccessfullyChangedEndTime(MainWindow window, int index, string s)
        {
            window.systemEntities.systemTimetables[index].endTime = s;
            Success success = new Success("Uspešno promenjeno vreme dolaska odabranog reda vožnje.");
            success.ShowDialog();
        }

        private void showSuccessfullyChangedStartTime(MainWindow window, int index, string s)
        {
            window.systemEntities.systemTimetables[index].startTime = s;
            Success success = new Success("Uspešno promenjeno vreme polaska odabranog reda vožnje.");
            success.ShowDialog();
        }

        private void showTrainAlreadyInUse(string columnName, TextBox element)
        {
            Error error = new Error("Voz je već zauzet u izmenjenom vremenu.");
            error.ShowDialog();
            if (columnName == "Polazak ")
            {
                element.Text = CurrentTimeTable.startTime;
            }
            else if (columnName == "Dolazak ")
            {
                element.Text = CurrentTimeTable.endTime;
            }
        }

        private bool isTimePeriodAlreadyInUse(MainWindow window, string columnName, string s)
        {
            foreach (Timetable timetable in window.systemEntities.systemTimetables)
            {
                if (timetable.train.Number == CurrentTimeTable.train.Number && timetable.id != CurrentTimeTable.id
                    && timetable.startDate == CurrentTimeTable.startDate && timetable.endDate == CurrentTimeTable.endDate)
                {
                    if ((timetable.startDate == timetable.endDate) && (TimeSpan.Parse(s) >= TimeSpan.Parse(timetable.startTime) &&
                        TimeSpan.Parse(s) <= TimeSpan.Parse(timetable.endTime)))
                    {
                        return true;
                    }
                    else if ((columnName == "Polazak " && timetable.startDate != timetable.endDate && TimeSpan.Parse(s) >= TimeSpan.Parse(timetable.startDate))
                        || (columnName == "Dolazak " && timetable.startDate != timetable.endDate && TimeSpan.Parse(s) <= TimeSpan.Parse(timetable.endDate)))
                    {
                        return true;
                    }
                    else if ((columnName == "Polazak " && TimeSpan.Parse(s) <= TimeSpan.Parse(timetable.startTime)) &&
                        TimeSpan.Parse(CurrentTimeTable.endTime) >= TimeSpan.Parse(timetable.endTime))
                    {
                        return true;
                    }
                }
            }
            return false;
        }




        private void showEndBeforeStartTimeError(TextBox element)
        {
            Error error = new Error("Vreme dolaska ne može biti manje od vremena dolaska!");
            error.ShowDialog();
            element.Text = CurrentTimeTable.endTime;
        }

        private void showStartAfterEndTimeError(TextBox element)
        {
            Error error = new Error("Vreme polaska ne može biti veće od vremena dolaska!");
            error.ShowDialog();
            element.Text = CurrentTimeTable.startTime;
        }

        private void showNotCorrectFormatTimeError(string columnName, TextBox element)
        {
            Error error = new Error("Format polaska i dolaska je HH:mm, gde HH predstavlja sate (00 - 24)," +
                " a mm minute (00 - 60).");
            error.ShowDialog();
            if (columnName == "Polazak ")
            {
                element.Text = CurrentTimeTable.startTime;
            }
            else if (columnName == "Dolazak ")
            {
                element.Text = CurrentTimeTable.endTime;
            }
        }

        private void showSuccessfullyChangedRoute(MainWindow window, int index)
        {
            for (int i = 0; i < window.systemEntities.systemTimetables.Count; i++)
            {
                if (window.systemEntities.systemTimetables[i].id == CurrentTimeTable.id)
                {
                    window.systemEntities.systemTimetables[i].Route = window.systemEntities.systemRoutes[index];
                    break;
                }
            }
            Success success = new Success("Uspešno izmenjena linija reda vožnje!");
            success.ShowDialog();
        }

        private void showRouteDoesntExistError(MainWindow window, TextBox element)
        {
            string routeNumbers = "";
            foreach (Route route in window.systemEntities.systemRoutes)
            {
                routeNumbers += route.Id + ", ";
            }
            routeNumbers = routeNumbers.Substring(0, routeNumbers.Length - 2);
            element.Text = CurrentTimeTable.Route.Id.ToString();
            Error error = new Error("Nepostojeći broj linije! Postojeće linije su: " + routeNumbers + ".");
            error.ShowDialog();
        }

        private bool doesRouteExist(MainWindow window, string s)
        {
            foreach (Route route in window.systemEntities.systemRoutes)
            {
                if (route.Id.ToString() == s)
                {
                    return true;
                }
            }
            return false;
        }
    }
}
