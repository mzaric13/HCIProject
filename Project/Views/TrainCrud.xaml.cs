using Project.Modals;
using Project.Model;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace Project.Views
{
    /// <summary>
    /// Interaction logic for TrainCrud.xaml
    /// </summary>
    public partial class TrainCrud : UserControl
    {   
        ObservableCollection<Train> trains = new ObservableCollection<Train>();

        private ObservableCollection<Timetable> currentTimetables = new ObservableCollection<Timetable>();

        public ObservableCollection<Timetable> CurrentTimetables
        {
            get { return currentTimetables; }
            set { currentTimetables = value; }
        }

        public Train currentTrain;
        public TrainCrud()
        {
            InitializeComponent();
        }
        public void fillTrainTable()
        {
            MainWindow window = (MainWindow)Window.GetWindow(this);
            trains = new ObservableCollection<Train>(window.systemEntities.systemTrains);
            tableTrains.ItemsSource = trains;
        }

        private void TrainCrudLoaded(object sender, RoutedEventArgs e)
        {
            fillTrainTable();
        }

        public void AddTrain(object sender, RoutedEventArgs e)
        {
            MainWindow window = (MainWindow)Window.GetWindow(this);
            int maxIndex = window.systemEntities.systemTrains.Max(t => t.Number);
            trains.Add(new Train(maxIndex + 1, "BrzaPtica"));
            window.systemEntities.systemTrains.Add(new Train(maxIndex + 1, "BrzaPtica"));
            Success success = new Success("Uspešno dodat voz broj " + (maxIndex + 1).ToString() + " prevoznika BrzaPtica.");
            success.ShowDialog();
        }

        private void tableTrains_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            if (e.Column.Header.ToString() == "Operator")
            {
                e.Column.Header = "Prevoznik";
            }
            if (e.Column.Header.ToString() == "Number")
            {
                e.Column.Header = "Broj voza";
                e.Column.IsReadOnly = true;
            }
        }

        public void DeleteTrain(object sender, RoutedEventArgs e)
        {
            YesNoModal yesNoModal = new YesNoModal("Da li ste sigurni da želite da obrišete odabrani voz?");
            yesNoModal.ShowDialog();
            if(yesNoModal.response)
            {
                MainWindow window = (MainWindow)Window.GetWindow(this);
                Train train = ((FrameworkElement)sender).DataContext as Train;
                foreach (Train t in window.systemEntities.systemTrains)
                {
                    if (t.Number == train.Number && t.Operator == train.Operator)
                    {
                        trains.Remove(train);
                        window.systemEntities.systemTrains.Remove(t);
                        break;
                    }
                }
            }
        }

        private void tableTrains_AutoGeneratedColumns(object sender, EventArgs e)
        {
            var grid = (DataGrid)sender;
            foreach (var item in grid.Columns)
            {
                if (item.Header.ToString() == "Obriši")
                {
                    item.DisplayIndex = grid.Columns.Count - 1;
                    break;
                }
            }
            foreach (var item in grid.Columns)
            {
                if (item.Header.ToString() == "Redovi vožnje")
                {
                    item.DisplayIndex = grid.Columns.Count - 2;
                    break;
                }
            }
        }

        public void ShowAllTrains(object sender, RoutedEventArgs e)
        {
            fillTrainTable();
        }

        public void SearchTrains(object sender, RoutedEventArgs e)
        {
            if (searchText.Text.Length == 0)
            {
                Error error = new Error("Niste uneli nijedan karakter za pretraživanje!");
                error.ShowDialog();
            }
            else
            {
                MainWindow window = (MainWindow)Window.GetWindow(this);
                List<Train> searchedTrains = new List<Train>();
                foreach (Train train in window.systemEntities.systemTrains)
                {
                    if (train.Number.ToString().Contains(searchText.Text) || train.Operator.ToLower().Contains(searchText.Text.ToLower())){
                        searchedTrains.Add(train);
                    }
                }
                trains = new ObservableCollection<Train>(searchedTrains);
                tableTrains.ItemsSource = trains;
            }
            
        }

        public void ShowTimetables(object sender, RoutedEventArgs e)
        {
            tableTrains.Visibility = Visibility.Hidden;
            nameTrain.Visibility = Visibility.Hidden;
            addTrain.Visibility = Visibility.Hidden;
            searchText.Visibility = Visibility.Hidden;
            searchTrains.Visibility = Visibility.Hidden;
            showAllTrains.Visibility = Visibility.Hidden;

            MainWindow window = (MainWindow)Window.GetWindow(this);
            Train train = ((FrameworkElement)sender).DataContext as Train;
            currentTrain = train;
            List<Timetable> foundTimetables = new List<Timetable>();
            foreach (Timetable timetable in window.systemEntities.systemTimetables)
            {
                if (timetable.train.Equals(train))
                {
                    foundTimetables.Add(timetable);
                }
            }
            currentTimetables = new ObservableCollection<Timetable>(foundTimetables);
            tableTimetables.ItemsSource = currentTimetables;

            tableTimetables.Visibility = Visibility.Visible;
            nameTimetable.Visibility = Visibility.Visible;
            addTimetable.Visibility = Visibility.Visible;
            searchTextTimetable.Visibility = Visibility.Visible;
            searchTimetables.Visibility = Visibility.Visible;
            showAllTimetables.Visibility = Visibility.Visible;
            back.Visibility = Visibility.Visible;
        }

        private void tableTimetables_AutoGeneratedColumns(object sender, EventArgs e)
        {
            var grid = (DataGrid)sender;
            foreach (var item in grid.Columns)
            {
                if (item.Header.ToString() == "Obriši")
                {
                    item.DisplayIndex = grid.Columns.Count - 1;
                    break;
                }
            }
        }

        private void tableTimetables_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            if (e.Column.Header.ToString() == "startTime")
            {
                e.Column.Header = "Polazak ";
                e.Column.IsReadOnly = true;
            }
            if (e.Column.Header.ToString() == "startDate")
            {
                e.Column.Header = "Datum polaska ";
                e.Column.IsReadOnly = true;
            }
            if (e.Column.Header.ToString() == "endTime")
            {
                e.Column.Header = "Dolazak ";
                e.Column.IsReadOnly = true;
            }
            if (e.Column.Header.ToString() == "endDate")
            {
                e.Column.Header = "Datum dolaska ";
                e.Column.IsReadOnly = true;
            }
            if (e.Column.Header.ToString() == "id")
            {
                e.Column.Header = "Broj reda vožnje ";
                e.Column.IsReadOnly = true;
            }
            if (e.Column.Header.ToString() == "Route")
            {
                e.Column.Visibility = Visibility.Hidden;
            }
            if (e.Column.Header.ToString() == "train")
            {
                e.Column.Visibility = Visibility.Hidden;
            }
        }

        public void DeleteTimetable(object sender, RoutedEventArgs e)
        {
            YesNoModal yesNoModal = new YesNoModal("Da li ste sigurni da želite da obrišete odabrani red vožnje za odabrani voz?");
            yesNoModal.ShowDialog();
            if (yesNoModal.response)
            {
                MainWindow window = (MainWindow)Window.GetWindow(this);
                Timetable timetable = ((FrameworkElement)sender).DataContext as Timetable;
                currentTimetables.Remove(timetable);
                foreach (Timetable t in window.systemEntities.systemTimetables)
                {
                    if (t.id == timetable.id && currentTrain.Number == timetable.train.Number)
                    {
                        window.systemEntities.systemTimetables.Remove(t);
                        break;
                    }
                }
            }
        }

        public void AddTimetable(object sender, RoutedEventArgs e)
        {
            MainWindow window = (MainWindow)Window.GetWindow(this);
            int maxIndex = window.systemEntities.systemTimetables.Max(t => t.id);
            foreach (Timetable timetable in window.systemEntities.systemTimetables)
            {
                if (timetable.train.Number != currentTrain.Number)
                {
                    bool exists = false;
                    foreach(Timetable currTimetable in currentTimetables)
                    {
                        if (currTimetable.startTime == timetable.startTime && currTimetable.startDate == timetable.startDate &&
                            currTimetable.endTime == timetable.endTime && currTimetable.endDate == timetable.endDate)
                        {
                            exists = true;
                        }
                    }
                    if (!exists)
                    {
                        window.systemEntities.systemTimetables.Add(new Timetable(maxIndex + 1, timetable.startTime, timetable.startDate, timetable.endTime, timetable.endDate, currentTrain, timetable.Route));
                        currentTimetables.Add(new Timetable(maxIndex + 1, timetable.startTime, timetable.startDate, timetable.endTime, timetable.endDate, currentTrain, timetable.Route));
                        Success success = new Success("Uspešno dodat novi red vožnje.");
                        success.ShowDialog();
                        return;
                    }
                }
            }
            currentTimetables.Add(new Timetable(maxIndex + 1, DateTime.Now.ToString("hh:mm"), DateTime.Now.ToString("dd.MM.yyyy"), (DateTime.Now + new TimeSpan(2, 0, 0)).ToString("hh:mm"), DateTime.Now.ToString("dd.MM.yyyy"), currentTrain, window.systemEntities.systemRoutes[0]));
            window.systemEntities.systemTimetables.Add(new Timetable(maxIndex + 1, DateTime.Now.ToString("hh:mm"), DateTime.Now.ToString("dd.MM.yyyy"), (DateTime.Now + new TimeSpan(2, 0, 0)).ToString("hh:mm"), DateTime.Now.ToString("dd.MM.yyyy"), currentTrain, window.systemEntities.systemRoutes[0]));
            Success success1 = new Success("Uspešno dodat novi red vožnje.");
            success1.ShowDialog();

        }

        public void SearchTimetables(object sender, RoutedEventArgs e)
        {
            if (searchTextTimetable.Text.Length == 0)
            {
                Error error = new Error("Niste uneli nijedan karakter za pretraživanje!");
                error.ShowDialog();
            }
            else
            {
                MainWindow window = (MainWindow)Window.GetWindow(this);
                List<Timetable> searchedTimetables = new List<Timetable>();
                foreach (Timetable timetable in window.systemEntities.systemTimetables)
                {
                    if (timetable.startDate.Contains(searchTextTimetable.Text) || timetable.startTime.Contains(searchTextTimetable.Text) ||
                        timetable.endDate.Contains(searchTextTimetable.Text) || timetable.endTime.Contains(searchTextTimetable.Text))
                    {
                        searchedTimetables.Add(timetable);
                    }
                }
                currentTimetables = new ObservableCollection<Timetable>(searchedTimetables);
                tableTimetables.ItemsSource = currentTimetables;
            }
        }

        public void ShowAllTimetables(object sender, RoutedEventArgs e)
        {
            MainWindow window = (MainWindow)Window.GetWindow(this);
            List<Timetable> foundTimetables = new List<Timetable>();
            foreach (Timetable timetable in window.systemEntities.systemTimetables)
            {
                if (timetable.train.Equals(currentTrain))
                {
                    foundTimetables.Add(timetable);
                }
            }
            currentTimetables = new ObservableCollection<Timetable>(foundTimetables);
            tableTimetables.ItemsSource = currentTimetables;
        }

        public void Back(object sender, RoutedEventArgs e)
        {
            tableTrains.Visibility = Visibility.Visible;
            nameTrain.Visibility = Visibility.Visible;
            addTrain.Visibility = Visibility.Visible;
            searchText.Visibility = Visibility.Visible;
            searchTrains.Visibility = Visibility.Visible;
            showAllTrains.Visibility = Visibility.Visible;

            tableTimetables.Visibility = Visibility.Hidden;
            nameTimetable.Visibility = Visibility.Hidden;
            addTimetable.Visibility = Visibility.Hidden;
            searchTextTimetable.Visibility = Visibility.Hidden;
            searchTimetables.Visibility = Visibility.Hidden;
            showAllTimetables.Visibility = Visibility.Hidden;
            back.Visibility = Visibility.Hidden;
        }
    }
}